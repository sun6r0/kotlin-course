package lessons.lesson03.homework

class Homework {

    // 1. Название мероприятия (неизменяемая публичная переменная известная на момент написания)
    val name: String = "Monster Hackaton"

    // 2. Дата проведения (публичная переменная известная на момент написания, но может быть изменена из-за переноса)
    var date: String = "10 ноября 2025"

    // 3. Место проведения (неизменяемая публичная переменная известная на момент написания)
    val place: String = "Садовническая ул., 82, стр. 2, Москва"

    // 4. Подробный бюджет мероприятия, включая расходы на оборудование, кейтеринг и другие операционные расходы. (приватная неизменяемая переменная - её не должны увидеть и бюджет уже запланирован и утверждён и не должен изменяться)
    private val fullBudget: String = "подробная информация с перечислением поставщиков и сумм для внутреннего пользования"

    // 5. Количество участников (публичная переменная известная на момент написания (так как кол-во участников мб ограничено), но может быть изменена из-за отказа участников)
    var participants: Int = 100

    // 6. Длительность хакатона (неизменяемая публичная переменная известная на момент написания)
    val duration: Int = 3

    // 7. Контактная информация и условия соглашений с поставщиками пищи, оборудования и других услуг. (публичная изменяемая переменная с отложенной инициализацией, так как на момент создания поставщик и соглашения не известны)
    lateinit var contactInfo: String

    // 8. Текущее состояние хакатона (статус) (публичная переменная известная на момент написания, но может быть изменена из-за смены статуса)
    var hakatonStatus: String = "Подготовка"

    // 9. Список спонсоров (публичная переменная известная на момент написания, но может быть изменена из-за пополнения/сокращения списка спонсоров)
    var sponsors: String = "Yandex, SimbirSoft, Google"

    // 10. Бюджет мероприятия (приватная переменная известная на момент написания, но может быть изменена из-за непредвиденных трат)
    private var budget: Int = 10000000

    // 11. Текущий уровень доступа к интернету (публичная изменяемая переменная с отложенной инициализацией, так как на момент начала хакатона соединение мб не известно)
    lateinit var internetConnection: String

    // 12. Информация о транспортировке оборудования, распределении ресурсов и координации между различными командами поддержки. (приватная изменяемая переменная)
    private var resourceManagement: String = "подробная информация о транспортировке оборудования, распределении ресурсов и координации между различными командами поддержки"

    // 13. Количество команд (публичная переменная известная на момент написания, но может быть изменена из-за сокращения кол-ва команд)
    var teams: Int = 5

    // 14. Перечень задач приватная переменная известная на момент написания, но может быть изменена из-за появления новых задач)
    private var tasks: String = "Перечень задач"

    // 15. План эвакуации (публичная неизменяемая переменная, так как место и план эвакуации будут известны заранее)
    val evacuationPlan: String = "План эвакуации"

    // 16. Список доступного оборудования (всё, что выделено для использования на мероприятии, изменяемая заранее известная переменная. Изменяется при повышении бюджета. Доступная только сотрудникам)
    private var availableEquipment: String = "Список доступного оборудования"

    // 17. Список свободного оборудования (всё, что можно взять прямо сейчас и что не занято другими участниками) (публичная изменяемая переменная с отложенной инициализацией, так как на момент начала хакатона статус свободного оборудования не известен)
    lateinit var currentAvailableEquipment: String

    // 18. График питания участников (зависит от поставщика питания, определяемого за неделю до начала) (публичная изменяемая переменная с отложенной инициализацией, так как на момент создания поставщик и график не известны)
    lateinit var mealSchedule: String

    // 19. План мероприятий на случай сбоев
    private val unexpectedSituationPlan: String = "План мероприятий на случай сбоев"

    // 20. Список экспертов и жюри (известен всем и может пополняться, поэтому изменяемый)
    var experts: String = "Список экспертов и жюри"

    // 21. Политика конфиденциальности (заключается в одностороннем порядке между организаторами и участниками, поэтому приватная)
    private val privacyPolicy: String = "Политика конфиденциальности"

    // 22. Приватные отзывы (фидбэк) участников и зрителей для анализа проблем. (не известны до начала хакатона)
    private lateinit var privateFeedback: String

    // 23. Текущая температура в помещении (не известна до начала хакатона, может меняться)
    lateinit var temperature: String

    // 24. Данные мониторинга и анализ производительности сетевого оборудования и интернет-соединения для целей отладки своих приложений командами
    lateinit var monitoringInfo: String

    // 25. Регулятор скорости интернета (понижающий коэффициент, например 0.5)
    var internetConnectionRegulation: Double = 0.5

    // 26. Уровень освещения (ожет меняться)
    var lightingLevel: Int = 7

    // 27. Лог событий мероприятия (не известен до начала хакатона, может меняться)
    private lateinit var events: String

    // 28. Возможность получения медицинской помощи прямо на мероприятии (да/нет)
    val medicalHelp: Boolean = true

    // 29. Планы и процедуры для обеспечения безопасности мероприятия, включая планы эвакуации и протоколы чрезвычайных ситуаций.
    private val securityPlans: String = "Планы и процедуры для обеспечения безопасности мероприятия, включая планы эвакуации и протоколы чрезвычайных ситуаций."

    // 30. Регистрационный номер мероприятия (может быть длинным числом и содержать буквы, поэтому стринг)
    val registrationNumber: String =  "Регистрационный номер мероприятия"

    // 31. Максимально допустимый уровень шума в помещении хакатона.
    val maxVolume: Int = 40

    // 32. Индикатор превышения уровня шума в помещениях (превышен или не превышен в данный момент)
    val maxVolumeIndicator: Boolean = false

    // 33. План взаимодействия с прессой
    private val journalistPlan: String = "План взаимодействия с прессой"

    // 34. Детальная публичная информация о проектах каждой команды, сбор данных включает в себя компиляцию кода и сбор статистики прогона автоматизированных проверок.
    lateinit var teamsInformation: String

    // 35. Статус получения всех необходимых разрешений для проведения мероприятия
    private var permissionsStatus: String = "Три из четырех разрешений получено"

    // 36. Индикатор доступности специализированного оборудования в данный момент (например, специальному оборудованию)
    private var specialEquipmentStatus: Boolean = false

    // 37. Список партнеров мероприятия
    var hakatonPartners: String = "VK, Habr"

    // 38. Отчет, включающий фотографии, видео и отзывы, генерируется и становится доступен после завершения мероприятия.
    lateinit var hakatonOverallReport: String

    // 39. Внутренние правила распределения призов
    val giftsManagementRules: String = "Внутренние правила распределения призов"

    // 40. Список разыгрываемых призов
    val gifts: String = "Список разыгрываемых призов"

    // 41. Контактная информация экстренных служб, медицинского персонала и других важных служб, для внутреннего пользования.
    private val contactInformationForInternalUse: String = "Контактная информация экстренных служб, медицинского персонала и других важных служб, для внутреннего пользования."

    // 42. Особые условия для участников с ограниченными возможностями
    val specialConditions: String = "Особые условия для участников с ограниченными возможностями"

    // 43. Общее настроение участников (определяется опросами)
    lateinit var overallMood: String

    // 44. Подробный план хакатона, включающий время и содержание каждого сегмента, инициализируется непосредственно перед началом мероприятия, так как зависит от фактического состава команд и взятых в работу задач.
    lateinit var fullHakatonPlan: String

    // 45. Имя знаменитого специального гостя, которое будет объявлено за день до мероприятия, но в момент инициализации неизвестно.
    lateinit var specialGuest: String

    // 46. Максимальное количество людей, которое может вместить место проведения.
    val maxGuestsNumber: Int = 100

    // 47. Количество часов, отведенное каждой команде для работы над проектом.
    val maxWorkingHours: Int = 24
}